name: Deploy Production Project In AWS
on:
  push:
    tags:
      - v*.*.*

jobs:
  build_and_test_unit:   
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Cache .NET packages    
      uses: actions/cache@v3
      id: dotnet-cache
      with:
        path: ~/.nuget/packages
        key: dotnet-packages-${{ github.repository }}
        restore-keys: dotnet-packages-${{ github.repository }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      if: steps.dotnet-cache.outputs.cache-hit != 'true'
      with:
        dotnet-version: 7.0.x

    - name: Restore Build and Test 
      run: | 
        dotnet restore
        dotnet build > /dev/null 2>&1
        dotnet test
      continue-on-error: false

  build_analyze_code_in_sonar:
    needs: build_and_test_unit
    name: Test and Analysis Code In Sonar Cloud
    runs-on: windows-latest
    steps:

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Cache SonarCloud packages
        id: cache-sonar
        uses: actions/cache@v3        
        with:        
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Create if not Exist Cache Sonar Packages
        if: steps.cache-sonar.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ~\sonar\cache -ItemType Directory    
            
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner      
        
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Build and analyze
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |          
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"alexfariakof_despesas-backend-api-net-core" /o:"alexfariakof" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="despesas-backend-api-net-core.XUnit/**,  **/Database-local/**,**/.documents/**, *.sql, **/Program.cs, **/Database-In-Memory/**" /d:sonar.cs.lcov.reportPaths="**/lcov.info"
          
          # Executa o teste e coleta o GUID gerado          
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect:"XPlat Code Coverage;Format=opencover"
            
            # Encontra o diretório mais recente na pasta TestResults
            $latestDir = Get-ChildItem -Directory -Path .\despesas-backend-api-net-core.XUnit\TestResults | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            $sourceDirs = Join-Path -Path (Get-Location) -ChildPath "despesas-backend-api-net-core"
            
            # Verifica se encontrou um diretório e, em caso afirmativo, obtém o nome do diretório (GUID)
            if ($latestDir -ne $null) {
              $guid = $latestDir.Name
          
              # Constrói os caminhos dinamicamente
              $baseDirectory = Join-Path -Path (Get-Location) -ChildPath "despesas-backend-api-net-core.XUnit"
              $coverageXmlPath = Join-Path -Path (Join-Path -Path $baseDirectory -ChildPath "TestResults") -ChildPath $guid
              
              # Gera o relatório de cobertura usando o GUID capturado
              
              dotnet tool install -g dotnet-reportgenerator-globaltool 
              reportgenerator -reports:$baseDirectory\coverage.cobertura.xml -targetdir:$coverageXmlPath\coveragereport -reporttypes:"lcov;" -sourcedirs:$sourceDirs -filefilters:-$sourceDirs\Database-In-Memory\**
            }
          
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        continue-on-error: false
        
  deploy:
    needs: build_analyze_code_in_sonar
    name: Docker Build and Publish in Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Build Docker image
        env:
          DOCKER_CLI_AGGREGATE: 1  
        run: |          
          docker-compose build          
        continue-on-error: false

      - name: Push Docker image to Docker Hub
        env:
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_CLI_AGGREGATE: 1  
        run: |
            docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}    
            docker push ${{ secrets.DOCKER_IMAGE }}
        continue-on-error: false
        
      - name: Execute SSH Commands into EC2 
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          script: |            
            ./scripts/dp-api.dev.sh
          continue-on-error: false
